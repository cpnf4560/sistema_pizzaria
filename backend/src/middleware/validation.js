const { body, validationResult } = require('express-validator');

const handleValidationErrors = (req, res, next) => {
  console.log('üîç === VALIDA√á√ÉO ===');
  console.log('üì® Body recebido:', req.body);
  console.log('üîç URL:', req.url);
  console.log('üîç Method:', req.method);
  
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    console.log('‚ùå Erros de valida√ß√£o:', errors.array());
    return res.status(400).json({
      success: false,
      message: 'Dados inv√°lidos',
      errors: errors.array()
    });
  }
  console.log('‚úÖ Valida√ß√£o passou');
  next();
};

const validateRegister = [
  body('email')
    .isEmail()
    .withMessage('Email deve ter formato v√°lido')
    .normalizeEmail(),
  body('password')
    .isLength({ min: 6 })
    .withMessage('Senha deve ter no m√≠nimo 6 caracteres'),
  body('nome')
    .isLength({ min: 2 })
    .withMessage('Nome deve ter no m√≠nimo 2 caracteres')
    .trim(),
  body('perfil')
    .optional()
    .isIn(['Cliente', 'Supervisor'])
    .withMessage('Perfil deve ser Cliente ou Supervisor'),
  handleValidationErrors
];

const validateLogin = [
  body('email')
    .notEmpty()
    .withMessage('Email ou username √© obrigat√≥rio')
    .trim(),
  body('password')
    .notEmpty()
    .withMessage('Senha √© obrigat√≥ria'),
  handleValidationErrors
];

const validatePizza = [
  body('nome')
    .isLength({ min: 2 })
    .withMessage('Nome deve ter no m√≠nimo 2 caracteres')
    .trim(),
  body('descricao')
    .isLength({ min: 5 })
    .withMessage('Descri√ß√£o deve ter no m√≠nimo 5 caracteres')
    .trim(),
  body('preco_pequena')
    .isFloat({ min: 0 })
    .withMessage('Pre√ßo pequena deve ser um n√∫mero positivo'),
  body('preco_media')
    .isFloat({ min: 0 })
    .withMessage('Pre√ßo m√©dia deve ser um n√∫mero positivo'),
  body('preco_grande')
    .isFloat({ min: 0 })
    .withMessage('Pre√ßo grande deve ser um n√∫mero positivo'),
  handleValidationErrors
];

const validateCliente = [
  body('nome')
    .isLength({ min: 2 })
    .withMessage('Nome deve ter no m√≠nimo 2 caracteres')
    .trim(),
  body('morada')
    .isLength({ min: 5 })
    .withMessage('Morada deve ter no m√≠nimo 5 caracteres')
    .trim(),
  body('telefone')
    .matches(/^[0-9+\-\s()]+$/)
    .withMessage('Telefone deve conter apenas n√∫meros e s√≠mbolos v√°lidos')
    .isLength({ min: 9 })
    .withMessage('Telefone deve ter no m√≠nimo 9 caracteres'),
  body('email')
    .isEmail()
    .withMessage('Email deve ter formato v√°lido')
    .normalizeEmail(),
  handleValidationErrors
];

const validateEncomenda = [
  body('cliente_id')
    .isInt({ min: 1 })
    .withMessage('ID do cliente deve ser um n√∫mero v√°lido'),
  body('tipo_entrega')
    .isIn(['recolha', 'entrega'])
    .withMessage('Tipo de entrega deve ser "recolha" ou "entrega"'),
  body('hora_entrega')
    .optional()
    .matches(/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/)
    .withMessage('Hora de entrega deve estar no formato HH:MM'),
  body('observacoes')
    .optional()
    .isLength({ max: 500 })
    .withMessage('Observa√ß√µes devem ter no m√°ximo 500 caracteres')
    .trim(),
  body('pizzas')
    .isArray({ min: 1 })
    .withMessage('Deve haver pelo menos uma pizza na encomenda'),
  body('pizzas.*.pizza_id')
    .isInt({ min: 1 })
    .withMessage('ID da pizza deve ser um n√∫mero v√°lido'),
  body('pizzas.*.tamanho')
    .isIn(['Pequena', 'M√©dia', 'Grande'])
    .withMessage('Tamanho deve ser Pequena, M√©dia ou Grande'),
  body('pizzas.*.quantidade')
    .optional()
    .isInt({ min: 1 })
    .withMessage('Quantidade deve ser um n√∫mero positivo'),
  body('pizzas.*.preco_unitario')
    .isFloat({ min: 0 })
    .withMessage('Pre√ßo unit√°rio deve ser um n√∫mero positivo'),
  handleValidationErrors
];

// Valida√ß√£o para frontend web (sem preco_unitario obrigat√≥rio)
const validateEncomendaWeb = [
  body('cliente_id')
    .isInt({ min: 1 })
    .withMessage('ID do cliente deve ser um n√∫mero v√°lido'),
  body('tipo_entrega')
    .isIn(['recolha', 'entrega'])
    .withMessage('Tipo de entrega deve ser "recolha" ou "entrega"'),
  body('hora_entrega')
    .optional()
    .matches(/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/)
    .withMessage('Hora de entrega deve estar no formato HH:MM'),
  body('observacoes')
    .optional()
    .isLength({ max: 500 })
    .withMessage('Observa√ß√µes devem ter no m√°ximo 500 caracteres')
    .trim(),
  body('pizzas')
    .isArray({ min: 1 })
    .withMessage('Deve haver pelo menos uma pizza na encomenda'),
  body('pizzas.*.pizza_id')
    .isInt({ min: 1 })
    .withMessage('ID da pizza deve ser um n√∫mero v√°lido'),
  body('pizzas.*.tamanho')
    .isIn(['Pequena', 'M√©dia', 'Grande'])
    .withMessage('Tamanho deve ser Pequena, M√©dia ou Grande'),
  body('pizzas.*.quantidade')
    .optional()
    .isInt({ min: 1 })
    .withMessage('Quantidade deve ser um n√∫mero positivo'),
  // Pre√ßo √© opcional para frontend - ser√° calculado automaticamente
  body('pizzas.*.preco_unitario')
    .optional()
    .isFloat({ min: 0 })
    .withMessage('Pre√ßo unit√°rio deve ser um n√∫mero positivo'),
  handleValidationErrors
];

const validateUpdateStatus = [
  body('status')
    .isIn(['Pendente', 'Preparando', 'Pronto', 'Entregue', 'Cancelado'])
    .withMessage('Status deve ser: Pendente, Preparando, Pronto, Entregue ou Cancelado'),
  handleValidationErrors
];

module.exports = {
  validateRegister,
  validateLogin,
  validatePizza,
  validateCliente,
  validateEncomenda,
  validateEncomendaWeb,
  validateUpdateStatus,
  handleValidationErrors
};